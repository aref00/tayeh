import { Base } from "../base";
import { customer } from "../customer/types";
import { instance, NewInstance, UpdateInstance, Product, NewProduct, CreatedProduct, DeletedProduct, UpdateProduct, UpdatedProduct, Transaction, NewTransaction, CreatedTransaction, UpdateTransaction, UpdatedTransaction, Invoice, Invoices, NewInvoice, CreatedInvoice, DeletedInvoice, UpdateInvoice, UpdatedInvoice, NewCustomer, CreatedCustomer, UpdateCustomer, UpdatedCustomer, sub_user, sub_users, NewUser, CreatedUser, DeletedUser, UpdateUser, addresses, NewAddress, DeletedAddress, UpdateAddress, SearchParams, RevenueParams, TotalParams, SeriesParams, InstancePageParams, CategoryParams, BannerParams, InviteParams, ProductParams, SearchFilters } from "./types";
export declare class Instance extends Base {
    getInstance(): Promise<import("axios").AxiosResponse<instance>>;
    createInstance(params: NewInstance): Promise<import("axios").AxiosResponse<instance>>;
    updateInstance(params: UpdateInstance): Promise<import("axios").AxiosResponse<instance>>;
    getInstancePage(page_number: number, params?: InstancePageParams): Promise<import("axios").AxiosResponse<instance[]>>;
    getProducts(params?: ProductParams): Promise<import("axios").AxiosResponse<Product[]>>;
    createInstanceProduct(params: NewProduct): Promise<import("axios").AxiosResponse<CreatedProduct>>;
    deleteInstanceProduct(product_id: number): Promise<import("axios").AxiosResponse<DeletedProduct>>;
    updateInstanceProduct(params: UpdateProduct): Promise<import("axios").AxiosResponse<UpdatedProduct>>;
    getInstanceTransactions(): Promise<import("axios").AxiosResponse<Transaction[]>>;
    findInstanceTransactions(params?: SearchParams): Promise<import("axios").AxiosResponse<Transaction[]>>;
    getProductTransactions(product_id: number): Promise<import("axios").AxiosResponse<Transaction[]>>;
    deleteInstanceTransaction(transaction_id: number): Promise<import("axios").AxiosResponse<instance>>;
    createInstanceTransaction(params: NewTransaction): Promise<import("axios").AxiosResponse<CreatedTransaction>>;
    updateInstanceTransaction(params: UpdateTransaction): Promise<import("axios").AxiosResponse<UpdatedTransaction>>;
    getInstanceInvoices(params?: SearchParams): Promise<import("axios").AxiosResponse<Invoices>>;
    getInstanceInvoice(invoice_id: number): Promise<import("axios").AxiosResponse<Invoice>>;
    deleteInstanceInvoice(invoice_id: number): Promise<import("axios").AxiosResponse<DeletedInvoice>>;
    createInstanceInvoice(params: NewInvoice): Promise<import("axios").AxiosResponse<CreatedInvoice>>;
    updateInstanceInvoice(params: UpdateInvoice): Promise<import("axios").AxiosResponse<UpdatedInvoice>>;
    getInstanceSeries(params?: SeriesParams): Promise<import("axios").AxiosResponse<instance[]>>;
    getInstanceTotal(params?: TotalParams): Promise<import("axios").AxiosResponse<instance[]>>;
    getInstanceRevenue(params?: RevenueParams): Promise<import("axios").AxiosResponse<instance[]>>;
    getInstanceCustomers(params?: SearchParams): Promise<import("axios").AxiosResponse<customer[]>>;
    getInstanceCustomer(customer_id: number): Promise<import("axios").AxiosResponse<customer>>;
    deleteInstanceCustomer(customer_id: number): Promise<import("axios").AxiosResponse<instance>>;
    createInstanceCustomer(params: NewCustomer): Promise<import("axios").AxiosResponse<CreatedCustomer>>;
    updateInstanceCustomer(params: UpdateCustomer): Promise<import("axios").AxiosResponse<UpdatedCustomer>>;
    getInstanceUsers(params?: SearchParams): Promise<import("axios").AxiosResponse<sub_users>>;
    getInstanceUser(user_id: number): Promise<import("axios").AxiosResponse<sub_user>>;
    deleteInstanceUser(user_id: number): Promise<import("axios").AxiosResponse<DeletedUser>>;
    createInstanceUser(params: NewUser): Promise<import("axios").AxiosResponse<CreatedUser>>;
    updateInstanceUser(params: UpdateUser): Promise<import("axios").AxiosResponse<instance>>;
    getInstanceAddresses(params?: SearchParams): Promise<import("axios").AxiosResponse<addresses>>;
    deleteInstanceAddress(address_id: number): Promise<import("axios").AxiosResponse<DeletedAddress>>;
    createInstanceAddress(params: NewAddress): Promise<import("axios").AxiosResponse<instance>>;
    updateInstanceAddress(params: UpdateAddress): Promise<import("axios").AxiosResponse<instance>>;
    getCategories(params?: CategoryParams): Promise<import("axios").AxiosResponse<any[]>>;
    getBanners(params?: BannerParams): Promise<import("axios").AxiosResponse<any[]>>;
    getSearchFilters(params?: SearchFilters): Promise<import("axios").AxiosResponse<any>>;
    sendInviteSms(params: InviteParams): Promise<import("axios").AxiosResponse<instance>>;
    getTopKeywords(params: SearchFilters): Promise<import("axios").AxiosResponse<instance>>;
}
