import { Base, Pagination } from "../base";
import { NewProduct, UpdateProduct, SetFeatures, NewCustomer, UpdateCustomer, SearchParams, CategoryParams, NewCategory, EditCategory, FilterGroup, CategoryFilter, NewBrand, EditBrand, BannerParams, NewBannerCat, NewBanner, EditBanner, InviteParams, ProductParams, SetProPrices, CreatePrice, UpdatePrice, UpdatePrices, ProductMedia, SearchFilters, InvoicesParams, CreateNotif, AutoRemaining, BatchRemaining, SetDeliveryStatus, NewDeliveryMethod, SetMethodStatus, CategoryStatus } from "./types";
export declare class Instance extends Base {
    getProducts(params?: ProductParams): Promise<import("axios").AxiosResponse<any[]>>;
    createProduct(params: NewProduct): Promise<import("axios").AxiosResponse<any>>;
    deleteProduct(product_id: string): Promise<import("axios").AxiosResponse<any>>;
    updateProduct(params: UpdateProduct): Promise<import("axios").AxiosResponse<any>>;
    createProductPrice(params: CreatePrice): Promise<import("axios").AxiosResponse<any>>;
    updateProductPrice(params: UpdatePrice): Promise<import("axios").AxiosResponse<any>>;
    updateProductPrices(params: UpdatePrices): Promise<import("axios").AxiosResponse<any>>;
    getProductPrices(product_id: string): Promise<import("axios").AxiosResponse<any>>;
    addProductMedia(product_id: string, params: ProductMedia): Promise<import("axios").AxiosResponse<any>>;
    deleteProductMedia(product_id: string, media_id: string): Promise<import("axios").AxiosResponse<any>>;
    setProductFeatures(product_id: string, body: SetFeatures): Promise<import("axios").AxiosResponse<any>>;
    setProductPriceFilter(product_id: string, params: SetProPrices): Promise<import("axios").AxiosResponse<any>>;
    deleteOptionPrice(product_id: string, option_id: string): Promise<import("axios").AxiosResponse<any>>;
    getInstanceInvoices(params?: InvoicesParams): Promise<import("axios").AxiosResponse<any[]>>;
    getInstanceInvoice(invoice_id: string): Promise<import("axios").AxiosResponse<any>>;
    deleteInstanceInvoice(invoice_id: string): Promise<import("axios").AxiosResponse<any>>;
    setDeliveryStatus(invoice_id: string, body: SetDeliveryStatus): Promise<import("axios").AxiosResponse<any>>;
    getInstanceCustomers(params?: SearchParams): Promise<import("axios").AxiosResponse<any[]>>;
    getInstanceCustomer(customer_id: string): Promise<import("axios").AxiosResponse<any>>;
    deleteInstanceCustomer(customer_id: number): Promise<import("axios").AxiosResponse<any>>;
    createInstanceCustomer(params: NewCustomer): Promise<import("axios").AxiosResponse<any>>;
    updateInstanceCustomer(customer_id: string, params: UpdateCustomer): Promise<import("axios").AxiosResponse<any>>;
    acceptInstanceCustomer(customer_id: string): Promise<import("axios").AxiosResponse<any>>;
    getCategories(params?: CategoryParams): Promise<import("axios").AxiosResponse<any[]>>;
    createCategory(params: NewCategory): Promise<import("axios").AxiosResponse<any>>;
    updateCategory(params: EditCategory): Promise<import("axios").AxiosResponse<any>>;
    deleteCategory(category_id: string): Promise<import("axios").AxiosResponse<any>>;
    createCategoryFilterGroup(category_id: string, params: FilterGroup): Promise<import("axios").AxiosResponse<any>>;
    createCategoryFilter(category_id: string, params: CategoryFilter): Promise<import("axios").AxiosResponse<any>>;
    getCategoryFeatures(category_id: string): Promise<import("axios").AxiosResponse<any>>;
    deleteCategoryFilter(category_id: string, filter_id: string): Promise<import("axios").AxiosResponse<any>>;
    deleteFilterOption(category_id: string, filter_id: string, option_id: string): Promise<import("axios").AxiosResponse<any>>;
    setCategoryStatus(category_id: string, body: CategoryStatus): Promise<import("axios").AxiosResponse<any>>;
    createBrand(params: NewBrand): Promise<import("axios").AxiosResponse<any>>;
    updateBrand(params: EditBrand): Promise<import("axios").AxiosResponse<any>>;
    deleteBrand(brand_id: string): Promise<import("axios").AxiosResponse<any>>;
    getBrands(): Promise<import("axios").AxiosResponse<any[]>>;
    createBannerCategory(body: NewBannerCat): Promise<import("axios").AxiosResponse<any>>;
    getBannerCategories(): Promise<import("axios").AxiosResponse<any[]>>;
    deleteBannerCategory(category_id: string): Promise<import("axios").AxiosResponse<any>>;
    getBanners(params?: BannerParams): Promise<import("axios").AxiosResponse<any[]>>;
    createBanner(body: NewBanner): Promise<import("axios").AxiosResponse<any>>;
    deleteBanner(banner_id: string): Promise<import("axios").AxiosResponse<any>>;
    updateBanner(body: EditBanner): Promise<import("axios").AxiosResponse<any>>;
    getInstanceDeliveryMethods(): Promise<import("axios").AxiosResponse<any[]>>;
    createInstanceDeliveryMethod(body: NewDeliveryMethod): Promise<import("axios").AxiosResponse<any>>;
    setDeliveryMethodStatus(method_id: string, body: SetMethodStatus): Promise<import("axios").AxiosResponse<any>>;
    createNotification(body: CreateNotif): Promise<import("axios").AxiosResponse<any>>;
    getInstanceNotifications(params: Pagination): Promise<import("axios").AxiosResponse<any[]>>;
    getSearchFilters(params?: SearchFilters): Promise<import("axios").AxiosResponse<any>>;
    sendInviteSms(params: InviteParams): Promise<import("axios").AxiosResponse<any>>;
    getTopKeywords(params: SearchFilters): Promise<import("axios").AxiosResponse<any>>;
    updateRemainingWithChoices(body: AutoRemaining): Promise<import("axios").AxiosResponse<any>>;
    updateRemainingsWithChoices(body: BatchRemaining): Promise<import("axios").AxiosResponse<any>>;
}
